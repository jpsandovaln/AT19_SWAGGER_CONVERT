# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Audioextractaudio(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, input_file: str=None, output_file: str=None):  # noqa: E501
        """Audioextractaudio - a model defined in Swagger

        :param input_file: The input_file of this Audioextractaudio.  # noqa: E501
        :type input_file: str
        :param output_file: The output_file of this Audioextractaudio.  # noqa: E501
        :type output_file: str
        """
        self.swagger_types = {
            'input_file': str,
            'output_file': str
        }

        self.attribute_map = {
            'input_file': 'input_file',
            'output_file': 'output_file'
        }
        self._input_file = input_file
        self._output_file = output_file

    @classmethod
    def from_dict(cls, dikt) -> 'Audioextractaudio':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The audioextractaudio of this Audioextractaudio.  # noqa: E501
        :rtype: Audioextractaudio
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_file(self) -> str:
        """Gets the input_file of this Audioextractaudio.

        Choose video file to convert:  # noqa: E501

        :return: The input_file of this Audioextractaudio.
        :rtype: str
        """
        return self._input_file

    @input_file.setter
    def input_file(self, input_file: str):
        """Sets the input_file of this Audioextractaudio.

        Choose video file to convert:  # noqa: E501

        :param input_file: The input_file of this Audioextractaudio.
        :type input_file: str
        """
        if input_file is None:
            raise ValueError("Invalid value for `input_file`, must not be `None`")  # noqa: E501

        self._input_file = input_file

    @property
    def output_file(self) -> str:
        """Gets the output_file of this Audioextractaudio.

        Choose the output format:  # noqa: E501

        :return: The output_file of this Audioextractaudio.
        :rtype: str
        """
        return self._output_file

    @output_file.setter
    def output_file(self, output_file: str):
        """Sets the output_file of this Audioextractaudio.

        Choose the output format:  # noqa: E501

        :param output_file: The output_file of this Audioextractaudio.
        :type output_file: str
        """
        allowed_values = ["mp3", "wav", "ogg", "flac", "wma"]  # noqa: E501
        if output_file not in allowed_values:
            raise ValueError(
                "Invalid value for `output_file` ({0}), must be one of {1}"
                .format(output_file, allowed_values)
            )

        self._output_file = output_file
