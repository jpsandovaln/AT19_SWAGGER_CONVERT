# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Texttranslator(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, text: str=None, language: str=None):  # noqa: E501
        """Texttranslator - a model defined in Swagger

        :param text: The text of this Texttranslator.  # noqa: E501
        :type text: str
        :param language: The language of this Texttranslator.  # noqa: E501
        :type language: str
        """
        self.swagger_types = {
            'text': str,
            'language': str
        }

        self.attribute_map = {
            'text': 'text',
            'language': 'language'
        }
        self._text = text
        self._language = language

    @classmethod
    def from_dict(cls, dikt) -> 'Texttranslator':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The texttranslator of this Texttranslator.  # noqa: E501
        :rtype: Texttranslator
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this Texttranslator.

        Write or paste text to translate:  # noqa: E501

        :return: The text of this Texttranslator.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Texttranslator.

        Write or paste text to translate:  # noqa: E501

        :param text: The text of this Texttranslator.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def language(self) -> str:
        """Gets the language of this Texttranslator.

        Select the destination language:  # noqa: E501

        :return: The language of this Texttranslator.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this Texttranslator.

        Select the destination language:  # noqa: E501

        :param language: The language of this Texttranslator.
        :type language: str
        """
        allowed_values = ["Spanish", "English", "Mexican"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language
